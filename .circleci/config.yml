version: 2.1

commands:

  abort_for_docs:
    steps:
      - run:
          name: Avoid tests for docs
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required"
              circleci step halt
            fi

  abort_for_noci:
    steps:
      - run:
          name: Ignore CI for specific branches
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi


  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  # on python 2.7 there's a specific issue in virtualenv that requires pinning to this verison
  # with poetry, pipfile, and other next-gen dependency managers
  build_and_test_py27:
    steps:
      - abort_for_docs
      - abort_for_noci
      - checkout

      - restore_cache: # Download and cache dependencies
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install ci dependencies
          command: |
            pip install --user -r .circleci/circle_requirements.txt
            sudo pip install --upgrade virtualenv==16.7.9

      - run:
          name: poetry install
          command: |
            poetry config virtualenvs.create false
            poetry lock
            #poetry install --no-interaction --no-dev  ## https://github.com/python-poetry/poetry/issues/1214
            pip install --user -r <(poetry export --without-hashes --format requirements.txt)  # IDEALLY not, but because of the 2.7 pain
            poetry build

      - run:
          name: lint
          command: tox -e linters

      - run:
          name: run tests
          command: tox -e cover

      - save_cache:
          paths:
            - ./.tox
            - ~/.cache/pip
          key: v1-dependencies-{{ checksum "pyproject.toml" }}

      - store_artifacts:
          path: test-reports
          destination: test-reports


  build_and_test:
    steps:
      - abort_for_docs
      - abort_for_noci
      - checkout

      - restore_cache: # Download and cache dependencies
          keys:
          - v1-dependencies-{{ checksum "pyproject.toml" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install ci dependencies
          command: |
            pip install --user -r .circleci/circle_requirements.txt

      - run:
          name: poetry install
          command: |
            poetry config virtualenvs.create false
            poetry lock
            #poetry install --no-interaction --no-dev  ## https://github.com/python-poetry/poetry/issues/1214
            pip install --user -r <(poetry export --without-hashes --format requirements.txt)  # IDEALLY not, but because of the 2.7 pain
            poetry build

      - run:
          name: lint
          command: tox -e linters

      - run:
          name: run tests
          command: tox -e cover

      - save_cache:
          paths:
            - ./.tox
            - ~/.cache/pip
          key: v1-dependencies-{{ checksum "pyproject.toml" }}

      - store_artifacts:
          path: test-reports
          destination: test-reports

jobs:
  # keeping for when we can eliminate python 2.7 - the matrix will be back
  build:
    parameters:
      python_version:
        type: string
        default: latest
    docker:
      - image: circleci/python:<<parameters.python_version>>
      - image: redislabs/redisearch:edge
    steps:
      - build_and_test

  build-py27:
    docker:
      - image: circleci/python:2.7.18
      - image: redislabs/redisearch:edge
    steps:
      - build_and_test_py27
#
#  build-py36:
#    docker:
#      - image: circleci/python:3.6.9
#      - image: redislabs/redisearch:edge
#    steps:
#      - build_and_test
#
#  build-py37:
#    docker:
#      - image: circleci/python:3.7.9
#      - image: redislabs/redisearch:edge
#    steps:
#      - build_and_test
#
#  build-py38:
#    docker:
#      - image: circleci/python:3.8.9
#      - image: redislabs/redisearch:edge
#    steps:
#      - build_and_test
#
#  build-py39:
#    docker:
#      - image: circleci/python:3.9.4
#      - image: redislabs/redisearch:edge
#    steps:
#      - build_and_test
#
#  build-latest:
#    docker:
#      - image: circleci/python:latest
#      - image: redislabs/redisearch:edge
#    steps:
#      - build_and_test


on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

on-master: &on-master
  filters:
    branches:
      only:
        - master

# the is to build and test, per commit against all supported python versions
python-versions: &python-versions
  matrix:
    parameters:
      python_version:
        - "3.6.9"
        - "3.7.9"
        - "3.8.9"
        - "3.9.4"
        - "latest"

workflows:
  version: 2
  commit:
    jobs:
      - build:
         <<: *on-any-branch
         <<: *python-versions
      - build-py27:
         <<: *on-any-branch
#      - build-py36:
#         <<: *on-any-branch
#      - build-py37:
#         <<: *on-any-branch
#         requires:
#           - build-py36
#      - build-py38:
#         <<: *on-any-branch
#         requires:
#           - build-py37
#      - build-py39:
#         <<: *on-any-branch
#         requires:
#           - build-py38
#      - build-latest:
#         <<: *on-any-branch
#         requires:
#           - build-py39

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          <<: *on-master
    jobs:
      - build
